// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Cloud Pub/Sub API (pubsub/v1)
// Generated from:
//   Version: v1
//   Revision: 20181226
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_PUBSUB_API_BINDING_H_
#define  GOOGLE_PUBSUB_API_BINDING_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/pubsub_api/expr.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_pubsub_api {
using namespace googleapis;

/**
 * Associates `members` with a `role`.
 *
 * @ingroup DataObject
 */
class Binding : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Binding* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Binding(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Binding(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Binding();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_pubsub_api::Binding</code>
   */
  const char* GetTypeName() const {
    return "google_pubsub_api::Binding";
  }

  /**
   * Determine if the '<code>condition</code>' attribute was set.
   *
   * @return true if the '<code>condition</code>' attribute was set.
   */
  bool has_condition() const {
    return Storage().isMember("condition");
  }

  /**
   * Clears the '<code>condition</code>' attribute.
   */
  void clear_condition() {
    MutableStorage()->removeMember("condition");
  }


  /**
   * Get a reference to the value of the '<code>condition</code>' attribute.
   */
  const Expr get_condition() const;

  /**
   * Gets a reference to a mutable value of the '<code>condition</code>'
   * property.
   *
   * Unimplemented. The condition that is associated with this binding.
   * NOTE: an unsatisfied condition will not allow user access via current
   * binding. Different bindings, including their conditions, are examined
   * independently.
   *
   * @return The result can be modified to change the attribute value.
   */
  Expr mutable_condition();

  /**
   * Determine if the '<code>members</code>' attribute was set.
   *
   * @return true if the '<code>members</code>' attribute was set.
   */
  bool has_members() const {
    return Storage().isMember("members");
  }

  /**
   * Clears the '<code>members</code>' attribute.
   */
  void clear_members() {
    MutableStorage()->removeMember("members");
  }


  /**
   * Get a reference to the value of the '<code>members</code>' attribute.
   */
  const client::JsonCppArray<string > get_members() const {
     const Json::Value& storage = Storage("members");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>members</code>' property.
   *
   * Specifies the identities requesting access for a Cloud Platform resource.
   * `members` can have the following values:
   *
   * * `allUsers`: A special identifier that represents anyone who is
   *    on the internet; with or without a Google account.
   *
   * * `allAuthenticatedUsers`: A special identifier that represents anyone
   *    who is authenticated with a Google account or a service account.
   *
   * * `user:{emailid}`: An email address that represents a specific Google
   *    account. For example, `alice@gmail.com` .
   *
   *
   * * `serviceAccount:{emailid}`: An email address that represents a service
   *    account. For example, `my-other-app@appspot.gserviceaccount.com`.
   *
   * * `group:{emailid}`: An email address that represents a Google group.
   *    For example, `admins@example.com`.
   *
   *
   * * `domain:{domain}`: A Google Apps domain name that represents all the
   *    users of that domain. For example, `google.com` or `example.com`.
   * .
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_members() {
    Json::Value* storage = MutableStorage("members");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>role</code>' attribute was set.
   *
   * @return true if the '<code>role</code>' attribute was set.
   */
  bool has_role() const {
    return Storage().isMember("role");
  }

  /**
   * Clears the '<code>role</code>' attribute.
   */
  void clear_role() {
    MutableStorage()->removeMember("role");
  }


  /**
   * Get the value of the '<code>role</code>' attribute.
   */
  const StringPiece get_role() const {
    const Json::Value& v = Storage("role");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>role</code>' attribute.
   *
   * Role that is assigned to `members`.
   * For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
   *
   * @param[in] value The new value.
   */
  void set_role(const StringPiece& value) {
    *MutableStorage("role") = value.data();
  }

 private:
  void operator=(const Binding&);
};  // Binding
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_BINDING_H_
