// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Cloud Pub/Sub API (pubsub/v1)
// Generated from:
//   Version: v1
//   Revision: 20181226
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_PUBSUB_API_POLICY_H_
#define  GOOGLE_PUBSUB_API_POLICY_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/pubsub_api/binding.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_pubsub_api {
using namespace googleapis;

/**
 * <dl>
 * <dt>"bindings"
 * <dd>[.
 * <dt>"role"
 * <dd>"roles/owner",.
 * <dt>"members"
 * <dd>[.
 * </dl>
 *
 * <dl>
 * <dt>"user
 * <dd>mike@example.com",.
 * <dt>"group
 * <dd>admins@example.com",.
 * <dt>"domain
 * <dd>google.com",.
 * <dt>"serviceAccount:my-other
 * <dd>app@appspot.gserviceaccount.com".
 * </dl>
 *           ]
 *         },
 *         {
 * <dl>
 * <dt>"role"
 * <dd>"roles/viewer",.
 * <dt>"members"
 * <dd>["user:sean@example.com"].
 * </dl>
 *         }
 *       ]
 *     }
 *
 * **YAML Example**
 * <dl>
 * <dt>bindings:
 * <dd>members:.
 * <dt>user:mike@example.com
 * <dd>group:admins@example.com.
 * <dt>domain:google.com
 * <dd>serviceAccount:my-other-app@appspot.gserviceaccount.com.
 * <dt>role
 * <dd>roles/owner.
 * <dt>members:
 * <dd>user:sean@example.com.
 * <dt>role
 * <dd>roles/viewer.
 * </dl>
 *
 *
 *
 * For a description of IAM and its features, see the
 * [IAM developer's guide](https://cloud.google.com/iam/docs).
 *
 * @ingroup DataObject
 */
class Policy : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Policy* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Policy(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Policy(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Policy();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_pubsub_api::Policy</code>
   */
  const char* GetTypeName() const {
    return "google_pubsub_api::Policy";
  }

  /**
   * Determine if the '<code>bindings</code>' attribute was set.
   *
   * @return true if the '<code>bindings</code>' attribute was set.
   */
  bool has_bindings() const {
    return Storage().isMember("bindings");
  }

  /**
   * Clears the '<code>bindings</code>' attribute.
   */
  void clear_bindings() {
    MutableStorage()->removeMember("bindings");
  }


  /**
   * Get a reference to the value of the '<code>bindings</code>' attribute.
   */
  const client::JsonCppArray<Binding > get_bindings() const;

  /**
   * Gets a reference to a mutable value of the '<code>bindings</code>'
   * property.
   *
   * Associates a list of `members` to a `role`.
   * `bindings` with no members will result in an error.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<Binding > mutable_bindings();

  /**
   * Determine if the '<code>etag</code>' attribute was set.
   *
   * @return true if the '<code>etag</code>' attribute was set.
   */
  bool has_etag() const {
    return Storage().isMember("etag");
  }

  /**
   * Clears the '<code>etag</code>' attribute.
   */
  void clear_etag() {
    MutableStorage()->removeMember("etag");
  }


  /**
   * Get the value of the '<code>etag</code>' attribute.
   */
  const StringPiece get_etag() const {
    const Json::Value& v = Storage("etag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>etag</code>' attribute.
   *
   * `etag` is used for optimistic concurrency control as a way to help
   * prevent simultaneous updates of a policy from overwriting each other.
   * It is strongly suggested that systems make use of the `etag` in the
   * <dl>
   * <dt>read-modify
   * <dd>write cycle to perform policy updates in order to avoid race.
   * <dt>conditions
   * <dd>An `etag` is returned in the response to `getIamPolicy`, and.
   * </dl>
   * systems are expected to put that etag in the request to `setIamPolicy` to
   * ensure that their change will be applied to the same version of the policy.
   *
   * If no `etag` is provided in the call to `setIamPolicy`, then the existing
   * policy is overwritten blindly.
   *
   * @param[in] value The new value.
   */
  void set_etag(const StringPiece& value) {
    *MutableStorage("etag") = value.data();
  }

  /**
   * Determine if the '<code>version</code>' attribute was set.
   *
   * @return true if the '<code>version</code>' attribute was set.
   */
  bool has_version() const {
    return Storage().isMember("version");
  }

  /**
   * Clears the '<code>version</code>' attribute.
   */
  void clear_version() {
    MutableStorage()->removeMember("version");
  }


  /**
   * Get the value of the '<code>version</code>' attribute.
   */
  int32 get_version() const {
    const Json::Value& storage = Storage("version");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>version</code>' attribute.
   * @deprecated
   *
   *
   * Deprecated.
   *
   * @param[in] value The new value.
   */
  void set_version(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("version"));
  }

 private:
  void operator=(const Policy&);
};  // Policy
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_POLICY_H_
