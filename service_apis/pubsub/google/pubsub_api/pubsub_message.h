// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Cloud Pub/Sub API (pubsub/v1)
// Generated from:
//   Version: v1
//   Revision: 20181226
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_PUBSUB_API_PUBSUB_MESSAGE_H_
#define  GOOGLE_PUBSUB_API_PUBSUB_MESSAGE_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_pubsub_api {
using namespace googleapis;

/**
 * A message that is published by publishers and consumed by subscribers. The
 * message must contain either a non-empty data field or at least one attribute.
 * Note that client libraries represent this object differently
 * depending on the language. See the corresponding
 * client
 * library documentation for more information. See
 * Quotas and limits
 * for more information about message limits.
 *
 * @ingroup DataObject
 */
class PubsubMessage : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static PubsubMessage* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PubsubMessage(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PubsubMessage(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~PubsubMessage();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_pubsub_api::PubsubMessage</code>
   */
  const char* GetTypeName() const {
    return "google_pubsub_api::PubsubMessage";
  }

  /**
   * Determine if the '<code>attributes</code>' attribute was set.
   *
   * @return true if the '<code>attributes</code>' attribute was set.
   */
  bool has_attributes() const {
    return Storage().isMember("attributes");
  }

  /**
   * Clears the '<code>attributes</code>' attribute.
   */
  void clear_attributes() {
    MutableStorage()->removeMember("attributes");
  }


  /**
   * Get a reference to the value of the '<code>attributes</code>' attribute.
   */
  const client::JsonCppAssociativeArray<string > get_attributes() const {
     const Json::Value& storage = Storage("attributes");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>attributes</code>'
   * property.
   *
   * Optional attributes for this message.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_attributes() {
    Json::Value* storage = MutableStorage("attributes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Determine if the '<code>data</code>' attribute was set.
   *
   * @return true if the '<code>data</code>' attribute was set.
   */
  bool has_data() const {
    return Storage().isMember("data");
  }

  /**
   * Clears the '<code>data</code>' attribute.
   */
  void clear_data() {
    MutableStorage()->removeMember("data");
  }


  /**
   * Get the value of the '<code>data</code>' attribute.
   */
  const StringPiece get_data() const {
    const Json::Value& v = Storage("data");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>data</code>' attribute.
   *
   * The message data field. If this field is empty, the message must contain
   * at least one attribute.
   *
   * @param[in] value The new value.
   */
  void set_data(const StringPiece& value) {
    *MutableStorage("data") = value.data();
  }

  /**
   * Determine if the '<code>messageId</code>' attribute was set.
   *
   * @return true if the '<code>messageId</code>' attribute was set.
   */
  bool has_message_id() const {
    return Storage().isMember("messageId");
  }

  /**
   * Clears the '<code>messageId</code>' attribute.
   */
  void clear_message_id() {
    MutableStorage()->removeMember("messageId");
  }


  /**
   * Get the value of the '<code>messageId</code>' attribute.
   */
  const StringPiece get_message_id() const {
    const Json::Value& v = Storage("messageId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>messageId</code>' attribute.
   *
   * ID of this message, assigned by the server when the message is published.
   * Guaranteed to be unique within the topic. This value may be read by a
   * subscriber that receives a `PubsubMessage` via a `Pull` call or a push
   * delivery. It must not be populated by the publisher in a `Publish` call.
   *
   * @param[in] value The new value.
   */
  void set_message_id(const StringPiece& value) {
    *MutableStorage("messageId") = value.data();
  }

  /**
   * Determine if the '<code>publishTime</code>' attribute was set.
   *
   * @return true if the '<code>publishTime</code>' attribute was set.
   */
  bool has_publish_time() const {
    return Storage().isMember("publishTime");
  }

  /**
   * Clears the '<code>publishTime</code>' attribute.
   */
  void clear_publish_time() {
    MutableStorage()->removeMember("publishTime");
  }


  /**
   * Get the value of the '<code>publishTime</code>' attribute.
   */
  const StringPiece get_publish_time() const {
    const Json::Value& v = Storage("publishTime");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>publishTime</code>' attribute.
   *
   * The time at which the message was published, populated by the server when
   * it receives the `Publish` call. It must not be populated by the
   * publisher in a `Publish` call.
   *
   * @param[in] value The new value.
   */
  void set_publish_time(const StringPiece& value) {
    *MutableStorage("publishTime") = value.data();
  }

 private:
  void operator=(const PubsubMessage&);
};  // PubsubMessage
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_PUBSUB_MESSAGE_H_
