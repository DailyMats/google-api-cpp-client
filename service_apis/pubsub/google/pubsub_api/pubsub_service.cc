// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/pubsub_api/pubsub_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"

#include "google/pubsub_api/acknowledge_request.h"
#include "google/pubsub_api/create_snapshot_request.h"
#include "google/pubsub_api/empty.h"
#include "google/pubsub_api/list_snapshots_response.h"
#include "google/pubsub_api/list_subscriptions_response.h"
#include "google/pubsub_api/list_topic_snapshots_response.h"
#include "google/pubsub_api/list_topic_subscriptions_response.h"
#include "google/pubsub_api/list_topics_response.h"
#include "google/pubsub_api/modify_ack_deadline_request.h"
#include "google/pubsub_api/modify_push_config_request.h"
#include "google/pubsub_api/policy.h"
#include "google/pubsub_api/publish_request.h"
#include "google/pubsub_api/publish_response.h"
#include "google/pubsub_api/pull_request.h"
#include "google/pubsub_api/pull_response.h"
#include "google/pubsub_api/seek_request.h"
#include "google/pubsub_api/seek_response.h"
#include "google/pubsub_api/set_iam_policy_request.h"
#include "google/pubsub_api/snapshot.h"
#include "google/pubsub_api/subscription.h"
#include "google/pubsub_api/test_iam_permissions_request.h"
#include "google/pubsub_api/test_iam_permissions_response.h"
#include "google/pubsub_api/topic.h"
#include "google/pubsub_api/update_snapshot_request.h"
#include "google/pubsub_api/update_subscription_request.h"
#include "google/pubsub_api/update_topic_request.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_pubsub_api {
using namespace googleapis;
const char PubsubService::googleapis_API_NAME[] = { "pubsub" };

const char PubsubService::googleapis_API_VERSION[] = { "v1" };

const char PubsubService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.5"};


const char PubsubService::SCOPES::CLOUD_PLATFORM[] = {"https://www.googleapis.com/auth/cloud-platform"};

const char PubsubService::SCOPES::PUBSUB[] = {"https://www.googleapis.com/auth/pubsub"};
PubsubServiceBaseRequest::PubsubServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_xgafv_(false),
      _have_access_token_(false),
      _have_alt_(false),
      _have_callback_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_upload_type_(false),
      _have_upload_protocol_(false) {
}

PubsubServiceBaseRequest::~PubsubServiceBaseRequest() {
}

util::Status PubsubServiceBaseRequest::AppendVariable(
    const string& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status PubsubServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_xgafv_) {
    StrAppend(target, sep, "$.xgafv=",
              client::CppValueToEscapedUrlValue(
                xgafv_));
    sep = "&";
  }
  if (_have_access_token_) {
    StrAppend(target, sep, "access_token=",
              client::CppValueToEscapedUrlValue(
                access_token_));
    sep = "&";
  }
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_callback_) {
    StrAppend(target, sep, "callback=",
              client::CppValueToEscapedUrlValue(
                callback_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_upload_type_) {
    StrAppend(target, sep, "uploadType=",
              client::CppValueToEscapedUrlValue(
                upload_type_));
    sep = "&";
  }
  if (_have_upload_protocol_) {
    StrAppend(target, sep, "upload_protocol=",
              client::CppValueToEscapedUrlValue(
                upload_protocol_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void PubsubServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}






// Standard constructor.
ProjectsResource_SnapshotsResource_CreateMethod::ProjectsResource_SnapshotsResource_CreateMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const CreateSnapshotRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SnapshotsResource_CreateMethod::~ProjectsResource_SnapshotsResource_CreateMethod() {
}


util::Status ProjectsResource_SnapshotsResource_CreateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_DeleteMethod::ProjectsResource_SnapshotsResource_DeleteMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& snapshot)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "v1/{+snapshot}"),
      snapshot_(snapshot.as_string()) {
}

// Standard destructor.
ProjectsResource_SnapshotsResource_DeleteMethod::~ProjectsResource_SnapshotsResource_DeleteMethod() {
}


util::Status ProjectsResource_SnapshotsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "snapshot") {
    client::UriTemplate::AppendValue(
        snapshot_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_GetMethod::ProjectsResource_SnapshotsResource_GetMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& snapshot)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+snapshot}"),
      snapshot_(snapshot.as_string()) {
}

// Standard destructor.
ProjectsResource_SnapshotsResource_GetMethod::~ProjectsResource_SnapshotsResource_GetMethod() {
}


util::Status ProjectsResource_SnapshotsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "snapshot") {
    client::UriTemplate::AppendValue(
        snapshot_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_GetIamPolicyMethod::ProjectsResource_SnapshotsResource_GetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+resource}:getIamPolicy"),
      resource_(resource.as_string()) {
}

// Standard destructor.
ProjectsResource_SnapshotsResource_GetIamPolicyMethod::~ProjectsResource_SnapshotsResource_GetIamPolicyMethod() {
}


util::Status ProjectsResource_SnapshotsResource_GetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_ListMethod::ProjectsResource_SnapshotsResource_ListMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+project}/snapshots"),
      project_(project.as_string()),
      _have_page_token_(false),
      _have_page_size_(false) {
}

// Standard destructor.
ProjectsResource_SnapshotsResource_ListMethod::~ProjectsResource_SnapshotsResource_ListMethod() {
}

util::Status ProjectsResource_SnapshotsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  return PubsubServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_SnapshotsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_PatchMethod::ProjectsResource_SnapshotsResource_PatchMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateSnapshotRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SnapshotsResource_PatchMethod::~ProjectsResource_SnapshotsResource_PatchMethod() {
}


util::Status ProjectsResource_SnapshotsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_SetIamPolicyMethod::ProjectsResource_SnapshotsResource_SetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:setIamPolicy"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SnapshotsResource_SetIamPolicyMethod::~ProjectsResource_SnapshotsResource_SetIamPolicyMethod() {
}


util::Status ProjectsResource_SnapshotsResource_SetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SnapshotsResource_TestIamPermissionsMethod::ProjectsResource_SnapshotsResource_TestIamPermissionsMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:testIamPermissions"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SnapshotsResource_TestIamPermissionsMethod::~ProjectsResource_SnapshotsResource_TestIamPermissionsMethod() {
}


util::Status ProjectsResource_SnapshotsResource_TestIamPermissionsMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ProjectsResource_SubscriptionsResource_AcknowledgeMethod::ProjectsResource_SubscriptionsResource_AcknowledgeMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription, const AcknowledgeRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+subscription}:acknowledge"),
      subscription_(subscription.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_AcknowledgeMethod::~ProjectsResource_SubscriptionsResource_AcknowledgeMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_AcknowledgeMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_CreateMethod::ProjectsResource_SubscriptionsResource_CreateMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const Subscription& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_CreateMethod::~ProjectsResource_SubscriptionsResource_CreateMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_CreateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_DeleteMethod::ProjectsResource_SubscriptionsResource_DeleteMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "v1/{+subscription}"),
      subscription_(subscription.as_string()) {
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_DeleteMethod::~ProjectsResource_SubscriptionsResource_DeleteMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_GetMethod::ProjectsResource_SubscriptionsResource_GetMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+subscription}"),
      subscription_(subscription.as_string()) {
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_GetMethod::~ProjectsResource_SubscriptionsResource_GetMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_GetIamPolicyMethod::ProjectsResource_SubscriptionsResource_GetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+resource}:getIamPolicy"),
      resource_(resource.as_string()) {
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_GetIamPolicyMethod::~ProjectsResource_SubscriptionsResource_GetIamPolicyMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_GetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_ListMethod::ProjectsResource_SubscriptionsResource_ListMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+project}/subscriptions"),
      project_(project.as_string()),
      _have_page_token_(false),
      _have_page_size_(false) {
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_ListMethod::~ProjectsResource_SubscriptionsResource_ListMethod() {
}

util::Status ProjectsResource_SubscriptionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  return PubsubServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_SubscriptionsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod::ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription, const ModifyAckDeadlineRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+subscription}:modifyAckDeadline"),
      subscription_(subscription.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod::~ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod::ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription, const ModifyPushConfigRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+subscription}:modifyPushConfig"),
      subscription_(subscription.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod::~ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_PatchMethod::ProjectsResource_SubscriptionsResource_PatchMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateSubscriptionRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_PatchMethod::~ProjectsResource_SubscriptionsResource_PatchMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_PullMethod::ProjectsResource_SubscriptionsResource_PullMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription, const PullRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+subscription}:pull"),
      subscription_(subscription.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_PullMethod::~ProjectsResource_SubscriptionsResource_PullMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_PullMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_SeekMethod::ProjectsResource_SubscriptionsResource_SeekMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& subscription, const SeekRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+subscription}:seek"),
      subscription_(subscription.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_SeekMethod::~ProjectsResource_SubscriptionsResource_SeekMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_SeekMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "subscription") {
    client::UriTemplate::AppendValue(
        subscription_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_SetIamPolicyMethod::ProjectsResource_SubscriptionsResource_SetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:setIamPolicy"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_SetIamPolicyMethod::~ProjectsResource_SubscriptionsResource_SetIamPolicyMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_SetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod::ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:testIamPermissions"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod::~ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod() {
}


util::Status ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ProjectsResource_TopicsResource_CreateMethod::ProjectsResource_TopicsResource_CreateMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const Topic& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_TopicsResource_CreateMethod::~ProjectsResource_TopicsResource_CreateMethod() {
}


util::Status ProjectsResource_TopicsResource_CreateMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_DeleteMethod::ProjectsResource_TopicsResource_DeleteMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& topic)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "v1/{+topic}"),
      topic_(topic.as_string()) {
}

// Standard destructor.
ProjectsResource_TopicsResource_DeleteMethod::~ProjectsResource_TopicsResource_DeleteMethod() {
}


util::Status ProjectsResource_TopicsResource_DeleteMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "topic") {
    client::UriTemplate::AppendValue(
        topic_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_GetMethod::ProjectsResource_TopicsResource_GetMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& topic)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+topic}"),
      topic_(topic.as_string()) {
}

// Standard destructor.
ProjectsResource_TopicsResource_GetMethod::~ProjectsResource_TopicsResource_GetMethod() {
}


util::Status ProjectsResource_TopicsResource_GetMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "topic") {
    client::UriTemplate::AppendValue(
        topic_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_GetIamPolicyMethod::ProjectsResource_TopicsResource_GetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+resource}:getIamPolicy"),
      resource_(resource.as_string()) {
}

// Standard destructor.
ProjectsResource_TopicsResource_GetIamPolicyMethod::~ProjectsResource_TopicsResource_GetIamPolicyMethod() {
}


util::Status ProjectsResource_TopicsResource_GetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_ListMethod::ProjectsResource_TopicsResource_ListMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& project)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+project}/topics"),
      project_(project.as_string()),
      _have_page_token_(false),
      _have_page_size_(false) {
}

// Standard destructor.
ProjectsResource_TopicsResource_ListMethod::~ProjectsResource_TopicsResource_ListMethod() {
}

util::Status ProjectsResource_TopicsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  return PubsubServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_TopicsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "project") {
    client::UriTemplate::AppendValue(
        project_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_PatchMethod::ProjectsResource_TopicsResource_PatchMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateTopicRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "v1/{+name}"),
      name_(name.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_TopicsResource_PatchMethod::~ProjectsResource_TopicsResource_PatchMethod() {
}


util::Status ProjectsResource_TopicsResource_PatchMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "name") {
    client::UriTemplate::AppendValue(
        name_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_PublishMethod::ProjectsResource_TopicsResource_PublishMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& topic, const PublishRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+topic}:publish"),
      topic_(topic.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_TopicsResource_PublishMethod::~ProjectsResource_TopicsResource_PublishMethod() {
}


util::Status ProjectsResource_TopicsResource_PublishMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "topic") {
    client::UriTemplate::AppendValue(
        topic_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_SetIamPolicyMethod::ProjectsResource_TopicsResource_SetIamPolicyMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:setIamPolicy"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_TopicsResource_SetIamPolicyMethod::~ProjectsResource_TopicsResource_SetIamPolicyMethod() {
}


util::Status ProjectsResource_TopicsResource_SetIamPolicyMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ProjectsResource_TopicsResource_TestIamPermissionsMethod::ProjectsResource_TopicsResource_TestIamPermissionsMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "v1/{+resource}:testIamPermissions"),
      resource_(resource.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ProjectsResource_TopicsResource_TestIamPermissionsMethod::~ProjectsResource_TopicsResource_TestIamPermissionsMethod() {
}


util::Status ProjectsResource_TopicsResource_TestIamPermissionsMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "resource") {
    client::UriTemplate::AppendValue(
        resource_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
ProjectsResource_TopicsResource_SnapshotsResource_ListMethod::ProjectsResource_TopicsResource_SnapshotsResource_ListMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& topic)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+topic}/snapshots"),
      topic_(topic.as_string()),
      _have_page_token_(false),
      _have_page_size_(false) {
}

// Standard destructor.
ProjectsResource_TopicsResource_SnapshotsResource_ListMethod::~ProjectsResource_TopicsResource_SnapshotsResource_ListMethod() {
}

util::Status ProjectsResource_TopicsResource_SnapshotsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  return PubsubServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_TopicsResource_SnapshotsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "topic") {
    client::UriTemplate::AppendValue(
        topic_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod::ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod(
    const PubsubService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& topic)
    : PubsubServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "v1/{+topic}/subscriptions"),
      topic_(topic.as_string()),
      _have_page_token_(false),
      _have_page_size_(false) {
}

// Standard destructor.
ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod::~ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod() {
}

util::Status ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  return PubsubServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod::AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "topic") {
    client::UriTemplate::AppendValue(
        topic_, config, target);
    return client::StatusOk();
  }
  return PubsubServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



PubsubService::PubsubService(client::HttpTransport* transport)
  : ClientService("https://pubsub.googleapis.com/", "", transport), projects_(this) {
  this->SetBatchPath("batch");
}

PubsubService::~PubsubService() {
}


PubsubService::ProjectsResource::ProjectsResource(PubsubService* service)
  : service_(service), snapshots_(service), subscriptions_(service), topics_(service) {
}




PubsubService::ProjectsResource::SnapshotsResource::SnapshotsResource(PubsubService* service)
  : service_(service) {
}



ProjectsResource_SnapshotsResource_CreateMethod* PubsubService::ProjectsResource::SnapshotsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const CreateSnapshotRequest& __request_content__) const {
  return new ProjectsResource_SnapshotsResource_CreateMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_SnapshotsResource_DeleteMethod* PubsubService::ProjectsResource::SnapshotsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& snapshot) const {
  return new ProjectsResource_SnapshotsResource_DeleteMethod(service_, _credential_, snapshot);
}


ProjectsResource_SnapshotsResource_GetMethod* PubsubService::ProjectsResource::SnapshotsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& snapshot) const {
  return new ProjectsResource_SnapshotsResource_GetMethod(service_, _credential_, snapshot);
}


ProjectsResource_SnapshotsResource_GetIamPolicyMethod* PubsubService::ProjectsResource::SnapshotsResource::NewGetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource) const {
  return new ProjectsResource_SnapshotsResource_GetIamPolicyMethod(service_, _credential_, resource);
}


ProjectsResource_SnapshotsResource_ListMethod* PubsubService::ProjectsResource::SnapshotsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ProjectsResource_SnapshotsResource_ListMethod(service_, _credential_, project);
}


ProjectsResource_SnapshotsResource_ListMethodPager* PubsubService::ProjectsResource::SnapshotsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_SnapshotsResource_ListMethod, ListSnapshotsResponse>(new ProjectsResource_SnapshotsResource_ListMethod(service_, _credential_, project));
}


ProjectsResource_SnapshotsResource_PatchMethod* PubsubService::ProjectsResource::SnapshotsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateSnapshotRequest& __request_content__) const {
  return new ProjectsResource_SnapshotsResource_PatchMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_SnapshotsResource_SetIamPolicyMethod* PubsubService::ProjectsResource::SnapshotsResource::NewSetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__) const {
  return new ProjectsResource_SnapshotsResource_SetIamPolicyMethod(service_, _credential_, resource, __request_content__);
}


ProjectsResource_SnapshotsResource_TestIamPermissionsMethod* PubsubService::ProjectsResource::SnapshotsResource::NewTestIamPermissionsMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__) const {
  return new ProjectsResource_SnapshotsResource_TestIamPermissionsMethod(service_, _credential_, resource, __request_content__);
}

PubsubService::ProjectsResource::SubscriptionsResource::SubscriptionsResource(PubsubService* service)
  : service_(service) {
}



ProjectsResource_SubscriptionsResource_AcknowledgeMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewAcknowledgeMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription, const AcknowledgeRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_AcknowledgeMethod(service_, _credential_, subscription, __request_content__);
}


ProjectsResource_SubscriptionsResource_CreateMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const Subscription& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_CreateMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_SubscriptionsResource_DeleteMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription) const {
  return new ProjectsResource_SubscriptionsResource_DeleteMethod(service_, _credential_, subscription);
}


ProjectsResource_SubscriptionsResource_GetMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription) const {
  return new ProjectsResource_SubscriptionsResource_GetMethod(service_, _credential_, subscription);
}


ProjectsResource_SubscriptionsResource_GetIamPolicyMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewGetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource) const {
  return new ProjectsResource_SubscriptionsResource_GetIamPolicyMethod(service_, _credential_, resource);
}


ProjectsResource_SubscriptionsResource_ListMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ProjectsResource_SubscriptionsResource_ListMethod(service_, _credential_, project);
}


ProjectsResource_SubscriptionsResource_ListMethodPager* PubsubService::ProjectsResource::SubscriptionsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_SubscriptionsResource_ListMethod, ListSubscriptionsResponse>(new ProjectsResource_SubscriptionsResource_ListMethod(service_, _credential_, project));
}


ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewModifyAckDeadlineMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription, const ModifyAckDeadlineRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod(service_, _credential_, subscription, __request_content__);
}


ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewModifyPushConfigMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription, const ModifyPushConfigRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod(service_, _credential_, subscription, __request_content__);
}


ProjectsResource_SubscriptionsResource_PatchMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateSubscriptionRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_PatchMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_SubscriptionsResource_PullMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewPullMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription, const PullRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_PullMethod(service_, _credential_, subscription, __request_content__);
}


ProjectsResource_SubscriptionsResource_SeekMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewSeekMethod(client::AuthorizationCredential* _credential_, const StringPiece& subscription, const SeekRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_SeekMethod(service_, _credential_, subscription, __request_content__);
}


ProjectsResource_SubscriptionsResource_SetIamPolicyMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewSetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_SetIamPolicyMethod(service_, _credential_, resource, __request_content__);
}


ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod* PubsubService::ProjectsResource::SubscriptionsResource::NewTestIamPermissionsMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__) const {
  return new ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod(service_, _credential_, resource, __request_content__);
}

PubsubService::ProjectsResource::TopicsResource::TopicsResource(PubsubService* service)
  : service_(service), snapshots_(service), subscriptions_(service) {
}



ProjectsResource_TopicsResource_CreateMethod* PubsubService::ProjectsResource::TopicsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const Topic& __request_content__) const {
  return new ProjectsResource_TopicsResource_CreateMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_TopicsResource_DeleteMethod* PubsubService::ProjectsResource::TopicsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new ProjectsResource_TopicsResource_DeleteMethod(service_, _credential_, topic);
}


ProjectsResource_TopicsResource_GetMethod* PubsubService::ProjectsResource::TopicsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new ProjectsResource_TopicsResource_GetMethod(service_, _credential_, topic);
}


ProjectsResource_TopicsResource_GetIamPolicyMethod* PubsubService::ProjectsResource::TopicsResource::NewGetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource) const {
  return new ProjectsResource_TopicsResource_GetIamPolicyMethod(service_, _credential_, resource);
}


ProjectsResource_TopicsResource_ListMethod* PubsubService::ProjectsResource::TopicsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new ProjectsResource_TopicsResource_ListMethod(service_, _credential_, project);
}


ProjectsResource_TopicsResource_ListMethodPager* PubsubService::ProjectsResource::TopicsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& project) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_TopicsResource_ListMethod, ListTopicsResponse>(new ProjectsResource_TopicsResource_ListMethod(service_, _credential_, project));
}


ProjectsResource_TopicsResource_PatchMethod* PubsubService::ProjectsResource::TopicsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& name, const UpdateTopicRequest& __request_content__) const {
  return new ProjectsResource_TopicsResource_PatchMethod(service_, _credential_, name, __request_content__);
}


ProjectsResource_TopicsResource_PublishMethod* PubsubService::ProjectsResource::TopicsResource::NewPublishMethod(client::AuthorizationCredential* _credential_, const StringPiece& topic, const PublishRequest& __request_content__) const {
  return new ProjectsResource_TopicsResource_PublishMethod(service_, _credential_, topic, __request_content__);
}


ProjectsResource_TopicsResource_SetIamPolicyMethod* PubsubService::ProjectsResource::TopicsResource::NewSetIamPolicyMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const SetIamPolicyRequest& __request_content__) const {
  return new ProjectsResource_TopicsResource_SetIamPolicyMethod(service_, _credential_, resource, __request_content__);
}


ProjectsResource_TopicsResource_TestIamPermissionsMethod* PubsubService::ProjectsResource::TopicsResource::NewTestIamPermissionsMethod(client::AuthorizationCredential* _credential_, const StringPiece& resource, const TestIamPermissionsRequest& __request_content__) const {
  return new ProjectsResource_TopicsResource_TestIamPermissionsMethod(service_, _credential_, resource, __request_content__);
}



PubsubService::ProjectsResource::TopicsResource::SnapshotsResource::SnapshotsResource(PubsubService* service)
  : service_(service) {
}



ProjectsResource_TopicsResource_SnapshotsResource_ListMethod* PubsubService::ProjectsResource::TopicsResource::SnapshotsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new ProjectsResource_TopicsResource_SnapshotsResource_ListMethod(service_, _credential_, topic);
}


ProjectsResource_TopicsResource_SnapshotsResource_ListMethodPager* PubsubService::ProjectsResource::TopicsResource::SnapshotsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_TopicsResource_SnapshotsResource_ListMethod, ListTopicSnapshotsResponse>(new ProjectsResource_TopicsResource_SnapshotsResource_ListMethod(service_, _credential_, topic));
}

PubsubService::ProjectsResource::TopicsResource::SubscriptionsResource::SubscriptionsResource(PubsubService* service)
  : service_(service) {
}



ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod* PubsubService::ProjectsResource::TopicsResource::SubscriptionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod(service_, _credential_, topic);
}


ProjectsResource_TopicsResource_SubscriptionsResource_ListMethodPager* PubsubService::ProjectsResource::TopicsResource::SubscriptionsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& topic) const {
  return new client::EncapsulatedServiceRequestPager<ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod, ListTopicSubscriptionsResponse>(new ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod(service_, _credential_, topic));
}
}  // namespace google_pubsub_api
