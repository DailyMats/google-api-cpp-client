// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_PUBSUB_API_PUBSUB_SERVICE_H_
#define  GOOGLE_PUBSUB_API_PUBSUB_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/pubsub_api/acknowledge_request.h"
#include "google/pubsub_api/create_snapshot_request.h"
#include "google/pubsub_api/empty.h"
#include "google/pubsub_api/list_snapshots_response.h"
#include "google/pubsub_api/list_subscriptions_response.h"
#include "google/pubsub_api/list_topic_snapshots_response.h"
#include "google/pubsub_api/list_topic_subscriptions_response.h"
#include "google/pubsub_api/list_topics_response.h"
#include "google/pubsub_api/modify_ack_deadline_request.h"
#include "google/pubsub_api/modify_push_config_request.h"
#include "google/pubsub_api/policy.h"
#include "google/pubsub_api/publish_request.h"
#include "google/pubsub_api/publish_response.h"
#include "google/pubsub_api/pull_request.h"
#include "google/pubsub_api/pull_response.h"
#include "google/pubsub_api/seek_request.h"
#include "google/pubsub_api/seek_response.h"
#include "google/pubsub_api/set_iam_policy_request.h"
#include "google/pubsub_api/snapshot.h"
#include "google/pubsub_api/subscription.h"
#include "google/pubsub_api/test_iam_permissions_request.h"
#include "google/pubsub_api/test_iam_permissions_response.h"
#include "google/pubsub_api/topic.h"
#include "google/pubsub_api/update_snapshot_request.h"
#include "google/pubsub_api/update_subscription_request.h"
#include "google/pubsub_api/update_topic_request.h"


namespace google_pubsub_api {
using namespace googleapis;
/**
 * \mainpage
 *   Cloud Pub/Sub API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://cloud.google.com/pubsub/docs'>Cloud Pub/Sub API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>20181226
 *      <tr><th>API Docs
 *          <td><a href='https://cloud.google.com/pubsub/docs'>
 *              https://cloud.google.com/pubsub/docs</a>
 *      <tr><th>Discovery Name<td>pubsub
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Cloud Pub/Sub API can be found at
 * <a href='https://cloud.google.com/pubsub/docs'>https://cloud.google.com/pubsub/docs</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class PubsubService;

/**
 * Implements a common base method for all methods within the PubsubService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class PubsubServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  PubsubServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const string& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~PubsubServiceBaseRequest();


  /**
   * Clears the '<code>$.xgafv</code>' attribute so it is no longer set.
   */
  void clear_xgafv() {
    _have_xgafv_ = false;
    client::ClearCppValueHelper(&xgafv_);
  }


  /**
   * Gets the optional '<code>$.xgafv</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_xgafv() const { return xgafv_; }

  /**
   * Gets a modifiable pointer to the optional <code>$.xgafv</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_$Xgafv() {
    _have_xgafv_ = true;
    return &xgafv_;
  }


  /**
   * Sets the '<code>$.xgafv</code>' attribute.
   *
   * @param[in] value V1 error format.
   */
  void set_xgafv(const string& value) {
    _have_xgafv_ = true;
    xgafv_ = value;
  }



  /**
   * Clears the '<code>access_token</code>' attribute so it is no longer set.
   */
  void clear_access_token() {
    _have_access_token_ = false;
    client::ClearCppValueHelper(&access_token_);
  }


  /**
   * Gets the optional '<code>access_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_access_token() const { return access_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>access_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_accessToken() {
    _have_access_token_ = true;
    return &access_token_;
  }


  /**
   * Sets the '<code>access_token</code>' attribute.
   *
   * @param[in] value OAuth access token.
   */
  void set_access_token(const string& value) {
    _have_access_token_ = true;
    access_token_ = value;
  }



  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>callback</code>' attribute so it is no longer set.
   */
  void clear_callback() {
    _have_callback_ = false;
    client::ClearCppValueHelper(&callback_);
  }


  /**
   * Gets the optional '<code>callback</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_callback() const { return callback_; }

  /**
   * Gets a modifiable pointer to the optional <code>callback</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_callback() {
    _have_callback_ = true;
    return &callback_;
  }


  /**
   * Sets the '<code>callback</code>' attribute.
   *
   * @param[in] value JSONP.
   */
  void set_callback(const string& value) {
    _have_callback_ = true;
    callback_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>uploadType</code>' attribute so it is no longer set.
   */
  void clear_upload_type() {
    _have_upload_type_ = false;
    client::ClearCppValueHelper(&upload_type_);
  }


  /**
   * Gets the optional '<code>uploadType</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_upload_type() const { return upload_type_; }

  /**
   * Gets a modifiable pointer to the optional <code>uploadType</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_uploadType() {
    _have_upload_type_ = true;
    return &upload_type_;
  }


  /**
   * Sets the '<code>uploadType</code>' attribute.
   *
   * @param[in] value Legacy upload protocol for media (e.g. "media",
   * "multipart").
   */
  void set_upload_type(const string& value) {
    _have_upload_type_ = true;
    upload_type_ = value;
  }



  /**
   * Clears the '<code>upload_protocol</code>' attribute so it is no longer set.
   */
  void clear_upload_protocol() {
    _have_upload_protocol_ = false;
    client::ClearCppValueHelper(&upload_protocol_);
  }


  /**
   * Gets the optional '<code>upload_protocol</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_upload_protocol() const { return upload_protocol_; }

  /**
   * Gets a modifiable pointer to the optional <code>upload_protocol</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_uploadProtocol() {
    _have_upload_protocol_ = true;
    return &upload_protocol_;
  }


  /**
   * Sets the '<code>upload_protocol</code>' attribute.
   *
   * @param[in] value Upload protocol for media (e.g. "raw", "multipart").
   */
  void set_upload_protocol(const string& value) {
    _have_upload_protocol_ = true;
    upload_protocol_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const string& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string xgafv_;
  string access_token_;
  string alt_;
  string callback_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string upload_type_;
  string upload_protocol_;
  bool _have_xgafv_ : 1;
  bool _have_access_token_ : 1;
  bool _have_alt_ : 1;
  bool _have_callback_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_upload_type_ : 1;
  bool _have_upload_protocol_ : 1;

  DISALLOW_COPY_AND_ASSIGN(PubsubServiceBaseRequest);
};






/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_CreateMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name Optional user-provided name for this snapshot.
   * If the name is not provided in the request, the server will assign a random
   * name for this snapshot on the same project as the subscription.
   * Note that for REST API requests, you must specify a name.  See the
   *
   * resource name rules.
   * Format is `projects/{project}/snapshots/{snap}`.
   * @param[in] _content_ The data object to create.
   */
  ProjectsResource_SnapshotsResource_CreateMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const CreateSnapshotRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Snapshot* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_DeleteMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] snapshot The name of the snapshot to delete.
   * Format is `projects/{project}/snapshots/{snap}`.
   */
  ProjectsResource_SnapshotsResource_DeleteMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& snapshot);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string snapshot_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_GetMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] snapshot The name of the snapshot to get.
   * Format is `projects/{project}/snapshots/{snap}`.
   */
  ProjectsResource_SnapshotsResource_GetMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& snapshot);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Snapshot* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string snapshot_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_GetMethod);
};

/**
 * Implements the getIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_GetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * requested.
   * See the operation documentation for the appropriate value for this field.
   */
  ProjectsResource_SnapshotsResource_GetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_GetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_GetIamPolicyMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_ListMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project The name of the project in which to list snapshots.
   * Format is `projects/{project-id}`.
   */
  ProjectsResource_SnapshotsResource_ListMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The value returned by the last `ListSnapshotsResponse`;
     * indicates that this
     * is a continuation of a prior `ListSnapshots` call, and that the system
     * should return the next page of data.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value Maximum number of snapshots to return.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListSnapshotsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string page_token_;
  int32 page_size_;
  bool _have_page_token_ : 1;
  bool _have_page_size_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ProjectsResource_SnapshotsResource_ListMethod,
            ListSnapshotsResponse>
        ProjectsResource_SnapshotsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_PatchMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name The name of the snapshot.
   * @param[in] _content_ The data object to patch.
   */
  ProjectsResource_SnapshotsResource_PatchMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const UpdateSnapshotRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Snapshot* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_PatchMethod);
};

/**
 * Implements the setIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_SetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * specified.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to setIamPolicy.
   */
  ProjectsResource_SnapshotsResource_SetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const SetIamPolicyRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_SetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_SetIamPolicyMethod);
};

/**
 * Implements the testIamPermissions method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SnapshotsResource_TestIamPermissionsMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy detail is
   * being requested.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to testIamPermissions.
   */
  ProjectsResource_SnapshotsResource_TestIamPermissionsMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const TestIamPermissionsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SnapshotsResource_TestIamPermissionsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TestIamPermissionsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SnapshotsResource_TestIamPermissionsMethod);
};


/**
 * Implements the acknowledge method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_AcknowledgeMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The subscription whose message is being
   * acknowledged.
   * Format is `projects/{project}/subscriptions/{sub}`.
   * @param[in] _content_ The data object to acknowledge.
   */
  ProjectsResource_SubscriptionsResource_AcknowledgeMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription,
      const AcknowledgeRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_AcknowledgeMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_AcknowledgeMethod);
};

/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_CreateMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name The name of the subscription. It must have the format
   * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
   * start with a letter, and contain only letters (`[A-Za-z]`), numbers
   * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
   * plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
   * in length, and it must not start with `"goog"`.
   * @param[in] _content_ The data object to create.
   */
  ProjectsResource_SubscriptionsResource_CreateMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const Subscription& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Subscription* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_DeleteMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The subscription to delete.
   * Format is `projects/{project}/subscriptions/{sub}`.
   */
  ProjectsResource_SubscriptionsResource_DeleteMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_GetMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The name of the subscription to get.
   * Format is `projects/{project}/subscriptions/{sub}`.
   */
  ProjectsResource_SubscriptionsResource_GetMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Subscription* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_GetMethod);
};

/**
 * Implements the getIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_GetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * requested.
   * See the operation documentation for the appropriate value for this field.
   */
  ProjectsResource_SubscriptionsResource_GetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_GetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_GetIamPolicyMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_ListMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project The name of the project in which to list subscriptions.
   * Format is `projects/{project-id}`.
   */
  ProjectsResource_SubscriptionsResource_ListMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The value returned by the last
     * `ListSubscriptionsResponse`; indicates that
     * this is a continuation of a prior `ListSubscriptions` call, and that the
     * system should return the next page of data.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value Maximum number of subscriptions to return.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListSubscriptionsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string page_token_;
  int32 page_size_;
  bool _have_page_token_ : 1;
  bool _have_page_size_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ProjectsResource_SubscriptionsResource_ListMethod,
            ListSubscriptionsResponse>
        ProjectsResource_SubscriptionsResource_ListMethodPager;

/**
 * Implements the modifyAckDeadline method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The name of the subscription.
   * Format is `projects/{project}/subscriptions/{sub}`.
   * @param[in] _content_ The data object to modifyAckDeadline.
   */
  ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription,
      const ModifyAckDeadlineRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod);
};

/**
 * Implements the modifyPushConfig method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The name of the subscription.
   * Format is `projects/{project}/subscriptions/{sub}`.
   * @param[in] _content_ The data object to modifyPushConfig.
   */
  ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription,
      const ModifyPushConfigRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_PatchMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name The name of the subscription. It must have the format
   * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
   * start with a letter, and contain only letters (`[A-Za-z]`), numbers
   * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
   * plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
   * in length, and it must not start with `"goog"`.
   * @param[in] _content_ The data object to patch.
   */
  ProjectsResource_SubscriptionsResource_PatchMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const UpdateSubscriptionRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Subscription* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_PatchMethod);
};

/**
 * Implements the pull method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_PullMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The subscription from which messages should be
   * pulled.
   * Format is `projects/{project}/subscriptions/{sub}`.
   * @param[in] _content_ The data object to pull.
   */
  ProjectsResource_SubscriptionsResource_PullMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription,
      const PullRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_PullMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PullResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_PullMethod);
};

/**
 * Implements the seek method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_SeekMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] subscription The subscription to affect.
   * @param[in] _content_ The data object to seek.
   */
  ProjectsResource_SubscriptionsResource_SeekMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& subscription,
      const SeekRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_SeekMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SeekResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string subscription_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_SeekMethod);
};

/**
 * Implements the setIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_SetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * specified.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to setIamPolicy.
   */
  ProjectsResource_SubscriptionsResource_SetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const SetIamPolicyRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_SetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_SetIamPolicyMethod);
};

/**
 * Implements the testIamPermissions method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy detail is
   * being requested.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to testIamPermissions.
   */
  ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const TestIamPermissionsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TestIamPermissionsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod);
};


/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_CreateMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name The name of the topic. It must have the format
   * `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
   * and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
   * underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
   * signs (`%`). It must be between 3 and 255 characters in length, and it
   * must not start with `"goog"`.
   * @param[in] _content_ The data object to create.
   */
  ProjectsResource_TopicsResource_CreateMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const Topic& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Topic* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_DeleteMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] topic Name of the topic to delete.
   * Format is `projects/{project}/topics/{topic}`.
   */
  ProjectsResource_TopicsResource_DeleteMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& topic);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Empty* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string topic_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_GetMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] topic The name of the topic to get.
   * Format is `projects/{project}/topics/{topic}`.
   */
  ProjectsResource_TopicsResource_GetMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& topic);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Topic* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string topic_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_GetMethod);
};

/**
 * Implements the getIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_GetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * requested.
   * See the operation documentation for the appropriate value for this field.
   */
  ProjectsResource_TopicsResource_GetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_GetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_GetIamPolicyMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_ListMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] project The name of the project in which to list topics.
   * Format is `projects/{project-id}`.
   */
  ProjectsResource_TopicsResource_ListMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& project);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The value returned by the last `ListTopicsResponse`;
     * indicates that this is
     * a continuation of a prior `ListTopics` call, and that the system should
     * return the next page of data.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value Maximum number of topics to return.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListTopicsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string project_;
  string page_token_;
  int32 page_size_;
  bool _have_page_token_ : 1;
  bool _have_page_size_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ProjectsResource_TopicsResource_ListMethod,
            ListTopicsResponse>
        ProjectsResource_TopicsResource_ListMethodPager;

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_PatchMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] name The name of the topic. It must have the format
   * `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
   * and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
   * underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
   * signs (`%`). It must be between 3 and 255 characters in length, and it
   * must not start with `"goog"`.
   * @param[in] _content_ The data object to patch.
   */
  ProjectsResource_TopicsResource_PatchMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& name,
      const UpdateTopicRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Topic* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string name_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_PatchMethod);
};

/**
 * Implements the publish method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_PublishMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] topic The messages in the request will be published on this
   * topic.
   * Format is `projects/{project}/topics/{topic}`.
   * @param[in] _content_ The data object to publish.
   */
  ProjectsResource_TopicsResource_PublishMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& topic,
      const PublishRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_PublishMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PublishResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string topic_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_PublishMethod);
};

/**
 * Implements the setIamPolicy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_SetIamPolicyMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy is being
   * specified.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to setIamPolicy.
   */
  ProjectsResource_TopicsResource_SetIamPolicyMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const SetIamPolicyRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_SetIamPolicyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Policy* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_SetIamPolicyMethod);
};

/**
 * Implements the testIamPermissions method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_TestIamPermissionsMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] resource REQUIRED: The resource for which the policy detail is
   * being requested.
   * See the operation documentation for the appropriate value for this field.
   * @param[in] _content_ The data object to testIamPermissions.
   */
  ProjectsResource_TopicsResource_TestIamPermissionsMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& resource,
      const TestIamPermissionsRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_TestIamPermissionsMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      TestIamPermissionsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string resource_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_TestIamPermissionsMethod);
};




/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_SnapshotsResource_ListMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] topic The name of the topic that snapshots are attached to.
   * Format is `projects/{project}/topics/{topic}`.
   */
  ProjectsResource_TopicsResource_SnapshotsResource_ListMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& topic);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_SnapshotsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The value returned by the last
     * `ListTopicSnapshotsResponse`; indicates
     * that this is a continuation of a prior `ListTopicSnapshots` call, and
     * that the system should return the next page of data.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value Maximum number of snapshot names to return.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListTopicSnapshotsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string topic_;
  string page_token_;
  int32 page_size_;
  bool _have_page_token_ : 1;
  bool _have_page_size_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_SnapshotsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ProjectsResource_TopicsResource_SnapshotsResource_ListMethod,
            ListTopicSnapshotsResponse>
        ProjectsResource_TopicsResource_SnapshotsResource_ListMethodPager;


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/cloud-platform
 * https://www.googleapis.com/auth/pubsub
 */
class ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod : public PubsubServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] topic The name of the topic that subscriptions are attached to.
   * Format is `projects/{project}/topics/{topic}`.
   */
  ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod(
      const PubsubService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& topic);

  /**
   * Standard destructor.
   */
  virtual ~ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod();


    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The value returned by the last
     * `ListTopicSubscriptionsResponse`; indicates
     * that this is a continuation of a prior `ListTopicSubscriptions` call, and
     * that the system should return the next page of data.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value Maximum number of subscription names to return.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const string& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListTopicSubscriptionsResponse* data) {
    return PubsubServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string topic_;
  string page_token_;
  int32 page_size_;
  bool _have_page_token_ : 1;
  bool _have_page_size_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod,
            ListTopicSubscriptionsResponse>
        ProjectsResource_TopicsResource_SubscriptionsResource_ListMethodPager;



/**
 * Service definition for PubsubService (v1).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://cloud.google.com/pubsub/docs'>'https://cloud.google.com/pubsub/docs</a>
 */
class PubsubService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ProjectsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ProjectsResource(PubsubService* service);

    /**
     * Standard destructor.
     */
    ~ProjectsResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SnapshotsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SnapshotsResource(PubsubService* service);

      /**
       * Standard destructor.
       */
      ~SnapshotsResource() {}


      /**
       * Creates a new ProjectsResource_SnapshotsResource_CreateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name Optional user-provided name for this snapshot.
       * If the name is not provided in the request, the server will assign a
       * random
       * name for this snapshot on the same project as the subscription.
       * Note that for REST API requests, you must specify a name.  See the
       *
       * resource name rules.
       * Format is `projects/{project}/snapshots/{snap}`.
       * @param[in] _content_ The data object to create.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const CreateSnapshotRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] snapshot The name of the snapshot to delete.
       * Format is `projects/{project}/snapshots/{snap}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& snapshot) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] snapshot The name of the snapshot to get.
       * Format is `projects/{project}/snapshots/{snap}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& snapshot) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_GetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_GetIamPolicyMethod* NewGetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] project The name of the project in which to list snapshots.
       * Format is `projects/{project-id}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] project The name of the project in which to list snapshots.
       * Format is `projects/{project-id}`.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ProjectsResource_SnapshotsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name The name of the snapshot.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const UpdateSnapshotRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SnapshotsResource_SetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being specified.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to setIamPolicy.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_SetIamPolicyMethod* NewSetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const SetIamPolicyRequest& _content_) const;

      /**
       * Creates a new
       * ProjectsResource_SnapshotsResource_TestIamPermissionsMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy detail
       * is being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to testIamPermissions.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SnapshotsResource_TestIamPermissionsMethod* NewTestIamPermissionsMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const TestIamPermissionsRequest& _content_) const;

     private:
      PubsubService* service_;

      DISALLOW_COPY_AND_ASSIGN(SnapshotsResource);
    };
    /**
     * Gets the snapshots resource method factory.
     *
     * @return SnapshotsResource for creating methods.
     */
    const SnapshotsResource& get_snapshots() const {
      return snapshots_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SubscriptionsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SubscriptionsResource(PubsubService* service);

      /**
       * Standard destructor.
       */
      ~SubscriptionsResource() {}


      /**
       * Creates a new ProjectsResource_SubscriptionsResource_AcknowledgeMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The subscription whose message is being
       * acknowledged.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @param[in] _content_ The data object to acknowledge.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_AcknowledgeMethod* NewAcknowledgeMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription,
          const AcknowledgeRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_CreateMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name The name of the subscription. It must have the format
       * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}`
       * must
       * start with a letter, and contain only letters (`[A-Za-z]`), numbers
       * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes
       * (`~`),
       * plus (`+`) or percent signs (`%`). It must be between 3 and 255
       * characters
       * in length, and it must not start with `"goog"`.
       * @param[in] _content_ The data object to create.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const Subscription& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_DeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The subscription to delete.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_GetMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The name of the subscription to get.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_GetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_GetIamPolicyMethod* NewGetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_ListMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] project The name of the project in which to list
       * subscriptions.
       * Format is `projects/{project-id}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] project The name of the project in which to list
       * subscriptions.
       * Format is `projects/{project-id}`.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ProjectsResource_SubscriptionsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a new
       * ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The name of the subscription.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @param[in] _content_ The data object to modifyAckDeadline.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_ModifyAckDeadlineMethod* NewModifyAckDeadlineMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription,
          const ModifyAckDeadlineRequest& _content_) const;

      /**
       * Creates a new
       * ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The name of the subscription.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @param[in] _content_ The data object to modifyPushConfig.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_ModifyPushConfigMethod* NewModifyPushConfigMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription,
          const ModifyPushConfigRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_PatchMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name The name of the subscription. It must have the format
       * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}`
       * must
       * start with a letter, and contain only letters (`[A-Za-z]`), numbers
       * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes
       * (`~`),
       * plus (`+`) or percent signs (`%`). It must be between 3 and 255
       * characters
       * in length, and it must not start with `"goog"`.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const UpdateSubscriptionRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_PullMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The subscription from which messages should be
       * pulled.
       * Format is `projects/{project}/subscriptions/{sub}`.
       * @param[in] _content_ The data object to pull.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_PullMethod* NewPullMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription,
          const PullRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_SeekMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] subscription The subscription to affect.
       * @param[in] _content_ The data object to seek.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_SeekMethod* NewSeekMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& subscription,
          const SeekRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_SubscriptionsResource_SetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being specified.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to setIamPolicy.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_SetIamPolicyMethod* NewSetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const SetIamPolicyRequest& _content_) const;

      /**
       * Creates a new
       * ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy detail
       * is being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to testIamPermissions.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_SubscriptionsResource_TestIamPermissionsMethod* NewTestIamPermissionsMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const TestIamPermissionsRequest& _content_) const;

     private:
      PubsubService* service_;

      DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource);
    };
    /**
     * Gets the subscriptions resource method factory.
     *
     * @return SubscriptionsResource for creating methods.
     */
    const SubscriptionsResource& get_subscriptions() const {
      return subscriptions_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class TopicsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit TopicsResource(PubsubService* service);

      /**
       * Standard destructor.
       */
      ~TopicsResource() {}

      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class SnapshotsResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit SnapshotsResource(PubsubService* service);

        /**
         * Standard destructor.
         */
        ~SnapshotsResource() {}


        /**
         * Creates a new
         * ProjectsResource_TopicsResource_SnapshotsResource_ListMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] topic The name of the topic that snapshots are attached
         * to.
         * Format is `projects/{project}/topics/{topic}`.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        ProjectsResource_TopicsResource_SnapshotsResource_ListMethod* NewListMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& topic) const;

        /**
         * Creates a pager for iterating over incremental result pages.
         * @param[in] _credential_  NULL credentials will not authorize the
         * request.
         * @param[in] topic The name of the topic that snapshots are attached
         * to.
         * Format is `projects/{project}/topics/{topic}`.
         *
         *
         * @see googleapis::googleapis::ServiceRequestPager
         */
        ProjectsResource_TopicsResource_SnapshotsResource_ListMethodPager* NewListMethodPager(
            client::AuthorizationCredential* _credential_,
            const StringPiece& topic) const;

       private:
        PubsubService* service_;

        DISALLOW_COPY_AND_ASSIGN(SnapshotsResource);
      };
      /**
       * Gets the snapshots resource method factory.
       *
       * @return SnapshotsResource for creating methods.
       */
      const SnapshotsResource& get_snapshots() const {
        return snapshots_;
      }


      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class SubscriptionsResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit SubscriptionsResource(PubsubService* service);

        /**
         * Standard destructor.
         */
        ~SubscriptionsResource() {}


        /**
         * Creates a new
         * ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] topic The name of the topic that subscriptions are
         * attached to.
         * Format is `projects/{project}/topics/{topic}`.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        ProjectsResource_TopicsResource_SubscriptionsResource_ListMethod* NewListMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& topic) const;

        /**
         * Creates a pager for iterating over incremental result pages.
         * @param[in] _credential_  NULL credentials will not authorize the
         * request.
         * @param[in] topic The name of the topic that subscriptions are
         * attached to.
         * Format is `projects/{project}/topics/{topic}`.
         *
         *
         * @see googleapis::googleapis::ServiceRequestPager
         */
        ProjectsResource_TopicsResource_SubscriptionsResource_ListMethodPager* NewListMethodPager(
            client::AuthorizationCredential* _credential_,
            const StringPiece& topic) const;

       private:
        PubsubService* service_;

        DISALLOW_COPY_AND_ASSIGN(SubscriptionsResource);
      };
      /**
       * Gets the subscriptions resource method factory.
       *
       * @return SubscriptionsResource for creating methods.
       */
      const SubscriptionsResource& get_subscriptions() const {
        return subscriptions_;
      }



      /**
       * Creates a new ProjectsResource_TopicsResource_CreateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name The name of the topic. It must have the format
       * `"projects/{project}/topics/{topic}"`. `{topic}` must start with a
       * letter,
       * and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
       * underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
       * signs (`%`). It must be between 3 and 255 characters in length, and it
       * must not start with `"goog"`.
       * @param[in] _content_ The data object to create.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const Topic& _content_) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] topic Name of the topic to delete.
       * Format is `projects/{project}/topics/{topic}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& topic) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] topic The name of the topic to get.
       * Format is `projects/{project}/topics/{topic}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& topic) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_GetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_GetIamPolicyMethod* NewGetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] project The name of the project in which to list topics.
       * Format is `projects/{project-id}`.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] project The name of the project in which to list topics.
       * Format is `projects/{project-id}`.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      ProjectsResource_TopicsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& project) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] name The name of the topic. It must have the format
       * `"projects/{project}/topics/{topic}"`. `{topic}` must start with a
       * letter,
       * and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
       * underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
       * signs (`%`). It must be between 3 and 255 characters in length, and it
       * must not start with `"goog"`.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& name,
          const UpdateTopicRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_PublishMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] topic The messages in the request will be published on this
       * topic.
       * Format is `projects/{project}/topics/{topic}`.
       * @param[in] _content_ The data object to publish.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_PublishMethod* NewPublishMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& topic,
          const PublishRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_SetIamPolicyMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy is
       * being specified.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to setIamPolicy.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_SetIamPolicyMethod* NewSetIamPolicyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const SetIamPolicyRequest& _content_) const;

      /**
       * Creates a new ProjectsResource_TopicsResource_TestIamPermissionsMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] resource REQUIRED: The resource for which the policy detail
       * is being requested.
       * See the operation documentation for the appropriate value for this
       * field.
       * @param[in] _content_ The data object to testIamPermissions.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      ProjectsResource_TopicsResource_TestIamPermissionsMethod* NewTestIamPermissionsMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& resource,
          const TestIamPermissionsRequest& _content_) const;

     private:
      PubsubService* service_;
      SnapshotsResource snapshots_;
      SubscriptionsResource subscriptions_;

      DISALLOW_COPY_AND_ASSIGN(TopicsResource);
    };
    /**
     * Gets the topics resource method factory.
     *
     * @return TopicsResource for creating methods.
     */
    const TopicsResource& get_topics() const {
      return topics_;
    }



   private:
    PubsubService* service_;
    SnapshotsResource snapshots_;
    SubscriptionsResource subscriptions_;
    TopicsResource topics_;

    DISALLOW_COPY_AND_ASSIGN(ProjectsResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit PubsubService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~PubsubService();

  /**
   * Gets the  resource method factory.
   *
   * @return ProjectsResource for creating methods.
   */
  const ProjectsResource& get_projects() const {
    return projects_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Cloud Pub/Sub API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the PubsubService.
   */
  class SCOPES {
   public:
    /**
     * View and manage your data across Google Cloud Platform services.
     */
    static const char CLOUD_PLATFORM[];

    /**
     * View and manage Pub/Sub topics and subscriptions.
     */
    static const char PUBSUB[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  ProjectsResource projects_;

  DISALLOW_COPY_AND_ASSIGN(PubsubService);
};


/**
 * @defgroup DataObject Cloud Pub/Sub API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Cloud Pub/Sub API Service
 *
 * The service classes contain information about accessing and using the
 * Cloud Pub/Sub API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Cloud Pub/Sub API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * PubsubService to access the Cloud Pub/Sub API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_PUBSUB_SERVICE_H_
