// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Cloud Pub/Sub API (pubsub/v1)
// Generated from:
//   Version: v1
//   Revision: 20181226
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_PUBSUB_API_PUSH_CONFIG_H_
#define  GOOGLE_PUBSUB_API_PUSH_CONFIG_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_pubsub_api {
using namespace googleapis;

/**
 * Configuration for a push delivery endpoint.
 *
 * @ingroup DataObject
 */
class PushConfig : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static PushConfig* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PushConfig(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PushConfig(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~PushConfig();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_pubsub_api::PushConfig</code>
   */
  const char* GetTypeName() const {
    return "google_pubsub_api::PushConfig";
  }

  /**
   * Determine if the '<code>attributes</code>' attribute was set.
   *
   * @return true if the '<code>attributes</code>' attribute was set.
   */
  bool has_attributes() const {
    return Storage().isMember("attributes");
  }

  /**
   * Clears the '<code>attributes</code>' attribute.
   */
  void clear_attributes() {
    MutableStorage()->removeMember("attributes");
  }


  /**
   * Get a reference to the value of the '<code>attributes</code>' attribute.
   */
  const client::JsonCppAssociativeArray<string > get_attributes() const {
     const Json::Value& storage = Storage("attributes");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>attributes</code>'
   * property.
   *
   * Endpoint configuration attributes.
   *
   * Every endpoint has a set of API supported attributes that can be used to
   * control different aspects of the message delivery.
   *
   * The currently supported attribute is `x-goog-version`, which you can
   * use to change the format of the pushed message. This attribute
   * indicates the version of the data expected by the endpoint. This
   * controls the shape of the pushed message (i.e., its fields and metadata).
   * The endpoint version is based on the version of the Pub/Sub API.
   *
   * If not present during the `CreateSubscription` call, it will default to
   * the version of the API used to make such call. If not present during a
   * `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
   * calls will always return a valid version, even if the subscription was
   * created without this attribute.
   *
   * The possible values for this attribute are:
   *
   * * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
   * * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_attributes() {
    Json::Value* storage = MutableStorage("attributes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Determine if the '<code>pushEndpoint</code>' attribute was set.
   *
   * @return true if the '<code>pushEndpoint</code>' attribute was set.
   */
  bool has_push_endpoint() const {
    return Storage().isMember("pushEndpoint");
  }

  /**
   * Clears the '<code>pushEndpoint</code>' attribute.
   */
  void clear_push_endpoint() {
    MutableStorage()->removeMember("pushEndpoint");
  }


  /**
   * Get the value of the '<code>pushEndpoint</code>' attribute.
   */
  const StringPiece get_push_endpoint() const {
    const Json::Value& v = Storage("pushEndpoint");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>pushEndpoint</code>' attribute.
   *
   * A URL locating the endpoint to which messages should be pushed.
   * For example, a Webhook endpoint might use "https://example.com/push".
   *
   * @param[in] value The new value.
   */
  void set_push_endpoint(const StringPiece& value) {
    *MutableStorage("pushEndpoint") = value.data();
  }

 private:
  void operator=(const PushConfig&);
};  // PushConfig
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_PUSH_CONFIG_H_
