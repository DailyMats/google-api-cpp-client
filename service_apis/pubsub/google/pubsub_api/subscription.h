// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Cloud Pub/Sub API (pubsub/v1)
// Generated from:
//   Version: v1
//   Revision: 20181226
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.5
#ifndef  GOOGLE_PUBSUB_API_SUBSCRIPTION_H_
#define  GOOGLE_PUBSUB_API_SUBSCRIPTION_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/pubsub_api/expiration_policy.h"
#include "google/pubsub_api/push_config.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_pubsub_api {
using namespace googleapis;

/**
 * A subscription resource.
 *
 * @ingroup DataObject
 */
class Subscription : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Subscription* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Subscription(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Subscription(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Subscription();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_pubsub_api::Subscription</code>
   */
  const char* GetTypeName() const {
    return "google_pubsub_api::Subscription";
  }

  /**
   * Determine if the '<code>ackDeadlineSeconds</code>' attribute was set.
   *
   * @return true if the '<code>ackDeadlineSeconds</code>' attribute was set.
   */
  bool has_ack_deadline_seconds() const {
    return Storage().isMember("ackDeadlineSeconds");
  }

  /**
   * Clears the '<code>ackDeadlineSeconds</code>' attribute.
   */
  void clear_ack_deadline_seconds() {
    MutableStorage()->removeMember("ackDeadlineSeconds");
  }


  /**
   * Get the value of the '<code>ackDeadlineSeconds</code>' attribute.
   */
  int32 get_ack_deadline_seconds() const {
    const Json::Value& storage = Storage("ackDeadlineSeconds");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>ackDeadlineSeconds</code>' attribute.
   *
   * The approximate amount of time (on a best-effort basis) Pub/Sub waits for
   * the subscriber to acknowledge receipt before resending the message. In the
   * interval after the message is delivered and before it is acknowledged, it
   * is considered to be outstanding. During that time period, the
   * message will not be redelivered (on a best-effort basis).
   *
   * For pull subscriptions, this value is used as the initial value for the ack
   * deadline. To override this value for a given message, call
   * `ModifyAckDeadline` with the corresponding `ack_id` if using
   * non-streaming pull or send the `ack_id` in a
   * `StreamingModifyAckDeadlineRequest` if using streaming pull.
   * The minimum custom deadline you can specify is 10 seconds.
   * The maximum custom deadline you can specify is 600 seconds (10 minutes).
   * If this parameter is 0, a default value of 10 seconds is used.
   *
   * For push delivery, this value is also used to set the request timeout for
   * the call to the push endpoint.
   *
   * If the subscriber never acknowledges the message, the Pub/Sub
   * system will eventually redeliver the message.
   *
   * @param[in] value The new value.
   */
  void set_ack_deadline_seconds(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("ackDeadlineSeconds"));
  }

  /**
   * Determine if the '<code>expirationPolicy</code>' attribute was set.
   *
   * @return true if the '<code>expirationPolicy</code>' attribute was set.
   */
  bool has_expiration_policy() const {
    return Storage().isMember("expirationPolicy");
  }

  /**
   * Clears the '<code>expirationPolicy</code>' attribute.
   */
  void clear_expiration_policy() {
    MutableStorage()->removeMember("expirationPolicy");
  }


  /**
   * Get a reference to the value of the '<code>expirationPolicy</code>'
   * attribute.
   */
  const ExpirationPolicy get_expiration_policy() const;

  /**
   * Gets a reference to a mutable value of the '<code>expirationPolicy</code>'
   * property.
   *
   * A policy that specifies the conditions for this subscription's expiration.
   * A subscription is considered active as long as any connected subscriber is
   * successfully consuming messages from the subscription or is issuing
   * operations on the subscription. If `expiration_policy` is not set, a
   * *default policy* with `ttl` of 31 days will be used. The minimum allowed
   * value for `expiration_policy.ttl` is 1 day.
   * BETA: This feature is part of a beta release. This API might be
   * changed in backward-incompatible ways and is not recommended for production
   * use. It is not subject to any SLA or deprecation policy.
   *
   * @return The result can be modified to change the attribute value.
   */
  ExpirationPolicy mutable_expirationPolicy();

  /**
   * Determine if the '<code>labels</code>' attribute was set.
   *
   * @return true if the '<code>labels</code>' attribute was set.
   */
  bool has_labels() const {
    return Storage().isMember("labels");
  }

  /**
   * Clears the '<code>labels</code>' attribute.
   */
  void clear_labels() {
    MutableStorage()->removeMember("labels");
  }


  /**
   * Get a reference to the value of the '<code>labels</code>' attribute.
   */
  const client::JsonCppAssociativeArray<string > get_labels() const {
     const Json::Value& storage = Storage("labels");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>labels</code>' property.
   *
   * See  Creating and
   * managing labels.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<string > mutable_labels() {
    Json::Value* storage = MutableStorage("labels");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<string > >(storage);
  }

  /**
   * Determine if the '<code>messageRetentionDuration</code>' attribute was set.
   *
   * @return true if the '<code>messageRetentionDuration</code>' attribute was
   * set.
   */
  bool has_message_retention_duration() const {
    return Storage().isMember("messageRetentionDuration");
  }

  /**
   * Clears the '<code>messageRetentionDuration</code>' attribute.
   */
  void clear_message_retention_duration() {
    MutableStorage()->removeMember("messageRetentionDuration");
  }


  /**
   * Get the value of the '<code>messageRetentionDuration</code>' attribute.
   */
  const StringPiece get_message_retention_duration() const {
    const Json::Value& v = Storage("messageRetentionDuration");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>messageRetentionDuration</code>' attribute.
   *
   * How long to retain unacknowledged messages in the subscription's backlog,
   * from the moment a message is published.
   * If `retain_acked_messages` is true, then this also configures the retention
   * of acknowledged messages, and thus configures how far back in time a `Seek`
   * can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10
   * minutes.
   * BETA: This feature is part of a beta release. This API might be
   * changed in backward-incompatible ways and is not recommended for production
   * use. It is not subject to any SLA or deprecation policy.
   *
   * @param[in] value The new value.
   */
  void set_message_retention_duration(const StringPiece& value) {
    *MutableStorage("messageRetentionDuration") = value.data();
  }

  /**
   * Determine if the '<code>name</code>' attribute was set.
   *
   * @return true if the '<code>name</code>' attribute was set.
   */
  bool has_name() const {
    return Storage().isMember("name");
  }

  /**
   * Clears the '<code>name</code>' attribute.
   */
  void clear_name() {
    MutableStorage()->removeMember("name");
  }


  /**
   * Get the value of the '<code>name</code>' attribute.
   */
  const StringPiece get_name() const {
    const Json::Value& v = Storage("name");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>name</code>' attribute.
   *
   * The name of the subscription. It must have the format
   * `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
   * start with a letter, and contain only letters (`[A-Za-z]`), numbers
   * (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
   * plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
   * in length, and it must not start with `"goog"`.
   *
   * @param[in] value The new value.
   */
  void set_name(const StringPiece& value) {
    *MutableStorage("name") = value.data();
  }

  /**
   * Determine if the '<code>pushConfig</code>' attribute was set.
   *
   * @return true if the '<code>pushConfig</code>' attribute was set.
   */
  bool has_push_config() const {
    return Storage().isMember("pushConfig");
  }

  /**
   * Clears the '<code>pushConfig</code>' attribute.
   */
  void clear_push_config() {
    MutableStorage()->removeMember("pushConfig");
  }


  /**
   * Get a reference to the value of the '<code>pushConfig</code>' attribute.
   */
  const PushConfig get_push_config() const;

  /**
   * Gets a reference to a mutable value of the '<code>pushConfig</code>'
   * property.
   *
   * If push delivery is used with this subscription, this field is
   * used to configure it. An empty `pushConfig` signifies that the subscriber
   * will pull and ack messages using API methods.
   *
   * @return The result can be modified to change the attribute value.
   */
  PushConfig mutable_pushConfig();

  /**
   * Determine if the '<code>retainAckedMessages</code>' attribute was set.
   *
   * @return true if the '<code>retainAckedMessages</code>' attribute was set.
   */
  bool has_retain_acked_messages() const {
    return Storage().isMember("retainAckedMessages");
  }

  /**
   * Clears the '<code>retainAckedMessages</code>' attribute.
   */
  void clear_retain_acked_messages() {
    MutableStorage()->removeMember("retainAckedMessages");
  }


  /**
   * Get the value of the '<code>retainAckedMessages</code>' attribute.
   */
  bool get_retain_acked_messages() const {
    const Json::Value& storage = Storage("retainAckedMessages");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>retainAckedMessages</code>' attribute.
   *
   * Indicates whether to retain acknowledged messages. If true, then
   * messages are not expunged from the subscription's backlog, even if they are
   * acknowledged, until they fall out of the `message_retention_duration`
   * window. This must be true if you would like to
   *
   * Seek to a timestamp.
   *
   * BETA: This feature is part of a beta release. This API might be
   * changed in backward-incompatible ways and is not recommended for production
   * use. It is not subject to any SLA or deprecation policy.
   *
   * @param[in] value The new value.
   */
  void set_retain_acked_messages(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("retainAckedMessages"));
  }

  /**
   * Determine if the '<code>topic</code>' attribute was set.
   *
   * @return true if the '<code>topic</code>' attribute was set.
   */
  bool has_topic() const {
    return Storage().isMember("topic");
  }

  /**
   * Clears the '<code>topic</code>' attribute.
   */
  void clear_topic() {
    MutableStorage()->removeMember("topic");
  }


  /**
   * Get the value of the '<code>topic</code>' attribute.
   */
  const StringPiece get_topic() const {
    const Json::Value& v = Storage("topic");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>topic</code>' attribute.
   *
   * The name of the topic from which this subscription is receiving messages.
   * Format is `projects/{project}/topics/{topic}`.
   * The value of this field will be `_deleted-topic_` if the topic has been
   * deleted.
   *
   * @param[in] value The new value.
   */
  void set_topic(const StringPiece& value) {
    *MutableStorage("topic") = value.data();
  }

 private:
  void operator=(const Subscription&);
};  // Subscription
}  // namespace google_pubsub_api
#endif  // GOOGLE_PUBSUB_API_SUBSCRIPTION_H_
